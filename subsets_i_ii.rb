"""
78. SUBSETS
https://leetcode.com/problems/subsets/


HELPFUL HOW TO by NeetCode: 
https://www.youtube.com/watch?v=REOH22Xwdkk


Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.


90. SUBSETS II 
https://leetcode.com/problems/subsets-ii/

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
"""

class Solution
    def initialize(nums)
        @nums = nums
        @res = []
        @cur_subset = []
    end

    def subsets
        @res = []
        @cur_subset = []
        
        dfs_uniques(0)

        @res
    end

    def dfs_uniques(i)
        if i < @nums.length #extend decision tree to element i. 
            # Note there are two recursive calls.
            # These are the branches of the decision tree.

            # 1. yes, add it
            @cur_subset << @nums[i]
            dfs_uniques(i + 1)

            # 2. no, skip it
            @cur_subset.pop
            dfs_uniques(i + 1)

        elsif i == @nums.length #no more elements to decide, append subset
            #important to dup because we're constantly modifying @cur_subset
            @res << @cur_subset.dup
            return
        end
    end

    def subsets_with_dup
        @nums.sort! # <- sorted to avoid duplicates
        @res = Set.new()
        @cur_subset = []
        
        dfs_with_dup(0)
        
        @res.to_a
    end

    def dfs_with_dup(i)
        if i < @nums.length 
            # decide whether or not to add element at index i

            # 1. yes, add it
            @cur_subset << @nums[i]
            dfs_with_dup(i + 1) unless @res.include?(@cur_subset)

            # 2. no, skip it
            @cur_subset.pop
            dfs_with_dup(i + 1) unless @res.include?(@cur_subset)

        elsif i == @nums.length
            #important to dup because we're constantly modifying @cur_subset
            @res.add(@cur_subset.dup)
        end
    end
end






## @param {Integer[]} nums
# @return {Integer[][]}
def subsets_with_dup(nums)
    sorted_nums = nums.sort
    subset_helper(sorted_nums)
end


def subset_helper(nums)
    # easiest way to avoid duplicates is to add the arrays to a hashed set and return subsets.to_a
    subsets = Set.new()
    subsets.add(nums)

    (0...nums.length).each do |i|
        new_arr = nums[0...i] + nums[i+1..-1]
        
        # including this check is major optimization for arrays w/lots of dups
        unless subsets.include?(new_arr) 
            subsets_with_dup(new_arr).each {|sub| subsets.add(sub)}
        end
    end
    
    subsets.to_a 
end


test_cases_uniques = [
    [1,2,3,4],
    [1,2,3,4,5,6,7,8]
]
expected_uniques = [
    [[],[1,2,3,4],[2,3,4],[3,4],[4],[3],[2,4],[2],[2,3],[1,3,4],[1,4],[1],[1,3],[1,2,4],[1,2],[1,2,3]],
    [[],[1],[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,8],[1,2,3,4,5,7],[1,2,3,4,5,7,8],[1,2,3,4,5,8],[1,2,3,4,6],[1,2,3,4,6,7],[1,2,3,4,6,7,8],[1,2,3,4,6,8],[1,2,3,4,7],[1,2,3,4,7,8],[1,2,3,4,8],[1,2,3,5],[1,2,3,5,6],[1,2,3,5,6,7],[1,2,3,5,6,7,8],[1,2,3,5,6,8],[1,2,3,5,7],[1,2,3,5,7,8],[1,2,3,5,8],[1,2,3,6],[1,2,3,6,7],[1,2,3,6,7,8],[1,2,3,6,8],[1,2,3,7],[1,2,3,7,8],[1,2,3,8],[1,2,4],[1,2,4,5],[1,2,4,5,6],[1,2,4,5,6,7],[1,2,4,5,6,7,8],[1,2,4,5,6,8],[1,2,4,5,7],[1,2,4,5,7,8],[1,2,4,5,8],[1,2,4,6],[1,2,4,6,7],[1,2,4,6,7,8],[1,2,4,6,8],[1,2,4,7],[1,2,4,7,8],[1,2,4,8],[1,2,5],[1,2,5,6],[1,2,5,6,7],[1,2,5,6,7,8],[1,2,5,6,8],[1,2,5,7],[1,2,5,7,8],[1,2,5,8],[1,2,6],[1,2,6,7],[1,2,6,7,8],[1,2,6,8],[1,2,7],[1,2,7,8],[1,2,8],[1,3],[1,3,4],[1,3,4,5],[1,3,4,5,6],[1,3,4,5,6,7],[1,3,4,5,6,7,8],[1,3,4,5,6,8],[1,3,4,5,7],[1,3,4,5,7,8],[1,3,4,5,8],[1,3,4,6],[1,3,4,6,7],[1,3,4,6,7,8],[1,3,4,6,8],[1,3,4,7],[1,3,4,7,8],[1,3,4,8],[1,3,5],[1,3,5,6],[1,3,5,6,7],[1,3,5,6,7,8],[1,3,5,6,8],[1,3,5,7],[1,3,5,7,8],[1,3,5,8],[1,3,6],[1,3,6,7],[1,3,6,7,8],[1,3,6,8],[1,3,7],[1,3,7,8],[1,3,8],[1,4],[1,4,5],[1,4,5,6],[1,4,5,6,7],[1,4,5,6,7,8],[1,4,5,6,8],[1,4,5,7],[1,4,5,7,8],[1,4,5,8],[1,4,6],[1,4,6,7],[1,4,6,7,8],[1,4,6,8],[1,4,7],[1,4,7,8],[1,4,8],[1,5],[1,5,6],[1,5,6,7],[1,5,6,7,8],[1,5,6,8],[1,5,7],[1,5,7,8],[1,5,8],[1,6],[1,6,7],[1,6,7,8],[1,6,8],[1,7],[1,7,8],[1,8],[2],[2,3],[2,3,4],[2,3,4,5],[2,3,4,5,6],[2,3,4,5,6,7],[2,3,4,5,6,7,8],[2,3,4,5,6,8],[2,3,4,5,7],[2,3,4,5,7,8],[2,3,4,5,8],[2,3,4,6],[2,3,4,6,7],[2,3,4,6,7,8],[2,3,4,6,8],[2,3,4,7],[2,3,4,7,8],[2,3,4,8],[2,3,5],[2,3,5,6],[2,3,5,6,7],[2,3,5,6,7,8],[2,3,5,6,8],[2,3,5,7],[2,3,5,7,8],[2,3,5,8],[2,3,6],[2,3,6,7],[2,3,6,7,8],[2,3,6,8],[2,3,7],[2,3,7,8],[2,3,8],[2,4],[2,4,5],[2,4,5,6],[2,4,5,6,7],[2,4,5,6,7,8],[2,4,5,6,8],[2,4,5,7],[2,4,5,7,8],[2,4,5,8],[2,4,6],[2,4,6,7],[2,4,6,7,8],[2,4,6,8],[2,4,7],[2,4,7,8],[2,4,8],[2,5],[2,5,6],[2,5,6,7],[2,5,6,7,8],[2,5,6,8],[2,5,7],[2,5,7,8],[2,5,8],[2,6],[2,6,7],[2,6,7,8],[2,6,8],[2,7],[2,7,8],[2,8],[3],[3,4],[3,4,5],[3,4,5,6],[3,4,5,6,7],[3,4,5,6,7,8],[3,4,5,6,8],[3,4,5,7],[3,4,5,7,8],[3,4,5,8],[3,4,6],[3,4,6,7],[3,4,6,7,8],[3,4,6,8],[3,4,7],[3,4,7,8],[3,4,8],[3,5],[3,5,6],[3,5,6,7],[3,5,6,7,8],[3,5,6,8],[3,5,7],[3,5,7,8],[3,5,8],[3,6],[3,6,7],[3,6,7,8],[3,6,8],[3,7],[3,7,8],[3,8],[4],[4,5],[4,5,6],[4,5,6,7],[4,5,6,7,8],[4,5,6,8],[4,5,7],[4,5,7,8],[4,5,8],[4,6],[4,6,7],[4,6,7,8],[4,6,8],[4,7],[4,7,8],[4,8],[5],[5,6],[5,6,7],[5,6,7,8],[5,6,8],[5,7],[5,7,8],[5,8],[6],[6,7],[6,7,8],[6,8],[7],[7,8],[8]]
]

test_cases_uniques.each_with_index do |test_case, i|
    s = Solution.new(test_case)
    p s.subsets
    p expected_uniques[i]
end



test_cases_with_dup = [
    [1, 2, 3, 4],
    [1,2,2,2,2,3],
    [4,4,4,1,4],
    [1,2,3,4,5,6,7],
    [1,2,3,4,5,6,7,8]
]
expected_with_dup = [
    [[],[1,2,3,4],[2,3,4],[3,4],[4],[3],[2,4],[2],[2,3],[1,3,4],[1,4],[1],[1,3],[1,2,4],[1,2],[1,2,3]],
    [[],[1],[1,2],[1,2,2],[1,2,2,2],[1,2,2,2,2],[1,2,2,2,2,3],[1,2,2,2,3],[1,2,2,3],[1,2,3],[1,3],[2],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,3],[2,2,2,3],[2,2,3],[2,3],[3]],
    [[],[1],[1,4],[1,4,4],[1,4,4,4],[1,4,4,4,4],[4],[4,4],[4,4,4],[4,4,4,4]],
    [[],[1],[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7],[1,2,3,4,5,7],[1,2,3,4,6],[1,2,3,4,6,7],[1,2,3,4,7],[1,2,3,5],[1,2,3,5,6],[1,2,3,5,6,7],[1,2,3,5,7],[1,2,3,6],[1,2,3,6,7],[1,2,3,7],[1,2,4],[1,2,4,5],[1,2,4,5,6],[1,2,4,5,6,7],[1,2,4,5,7],[1,2,4,6],[1,2,4,6,7],[1,2,4,7],[1,2,5],[1,2,5,6],[1,2,5,6,7],[1,2,5,7],[1,2,6],[1,2,6,7],[1,2,7],[1,3],[1,3,4],[1,3,4,5],[1,3,4,5,6],[1,3,4,5,6,7],[1,3,4,5,7],[1,3,4,6],[1,3,4,6,7],[1,3,4,7],[1,3,5],[1,3,5,6],[1,3,5,6,7],[1,3,5,7],[1,3,6],[1,3,6,7],[1,3,7],[1,4],[1,4,5],[1,4,5,6],[1,4,5,6,7],[1,4,5,7],[1,4,6],[1,4,6,7],[1,4,7],[1,5],[1,5,6],[1,5,6,7],[1,5,7],[1,6],[1,6,7],[1,7],[2],[2,3],[2,3,4],[2,3,4,5],[2,3,4,5,6],[2,3,4,5,6,7],[2,3,4,5,7],[2,3,4,6],[2,3,4,6,7],[2,3,4,7],[2,3,5],[2,3,5,6],[2,3,5,6,7],[2,3,5,7],[2,3,6],[2,3,6,7],[2,3,7],[2,4],[2,4,5],[2,4,5,6],[2,4,5,6,7],[2,4,5,7],[2,4,6],[2,4,6,7],[2,4,7],[2,5],[2,5,6],[2,5,6,7],[2,5,7],[2,6],[2,6,7],[2,7],[3],[3,4],[3,4,5],[3,4,5,6],[3,4,5,6,7],[3,4,5,7],[3,4,6],[3,4,6,7],[3,4,7],[3,5],[3,5,6],[3,5,6,7],[3,5,7],[3,6],[3,6,7],[3,7],[4],[4,5],[4,5,6],[4,5,6,7],[4,5,7],[4,6],[4,6,7],[4,7],[5],[5,6],[5,6,7],[5,7],[6],[6,7],[7]],
    [[],[1],[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,8],[1,2,3,4,5,7],[1,2,3,4,5,7,8],[1,2,3,4,5,8],[1,2,3,4,6],[1,2,3,4,6,7],[1,2,3,4,6,7,8],[1,2,3,4,6,8],[1,2,3,4,7],[1,2,3,4,7,8],[1,2,3,4,8],[1,2,3,5],[1,2,3,5,6],[1,2,3,5,6,7],[1,2,3,5,6,7,8],[1,2,3,5,6,8],[1,2,3,5,7],[1,2,3,5,7,8],[1,2,3,5,8],[1,2,3,6],[1,2,3,6,7],[1,2,3,6,7,8],[1,2,3,6,8],[1,2,3,7],[1,2,3,7,8],[1,2,3,8],[1,2,4],[1,2,4,5],[1,2,4,5,6],[1,2,4,5,6,7],[1,2,4,5,6,7,8],[1,2,4,5,6,8],[1,2,4,5,7],[1,2,4,5,7,8],[1,2,4,5,8],[1,2,4,6],[1,2,4,6,7],[1,2,4,6,7,8],[1,2,4,6,8],[1,2,4,7],[1,2,4,7,8],[1,2,4,8],[1,2,5],[1,2,5,6],[1,2,5,6,7],[1,2,5,6,7,8],[1,2,5,6,8],[1,2,5,7],[1,2,5,7,8],[1,2,5,8],[1,2,6],[1,2,6,7],[1,2,6,7,8],[1,2,6,8],[1,2,7],[1,2,7,8],[1,2,8],[1,3],[1,3,4],[1,3,4,5],[1,3,4,5,6],[1,3,4,5,6,7],[1,3,4,5,6,7,8],[1,3,4,5,6,8],[1,3,4,5,7],[1,3,4,5,7,8],[1,3,4,5,8],[1,3,4,6],[1,3,4,6,7],[1,3,4,6,7,8],[1,3,4,6,8],[1,3,4,7],[1,3,4,7,8],[1,3,4,8],[1,3,5],[1,3,5,6],[1,3,5,6,7],[1,3,5,6,7,8],[1,3,5,6,8],[1,3,5,7],[1,3,5,7,8],[1,3,5,8],[1,3,6],[1,3,6,7],[1,3,6,7,8],[1,3,6,8],[1,3,7],[1,3,7,8],[1,3,8],[1,4],[1,4,5],[1,4,5,6],[1,4,5,6,7],[1,4,5,6,7,8],[1,4,5,6,8],[1,4,5,7],[1,4,5,7,8],[1,4,5,8],[1,4,6],[1,4,6,7],[1,4,6,7,8],[1,4,6,8],[1,4,7],[1,4,7,8],[1,4,8],[1,5],[1,5,6],[1,5,6,7],[1,5,6,7,8],[1,5,6,8],[1,5,7],[1,5,7,8],[1,5,8],[1,6],[1,6,7],[1,6,7,8],[1,6,8],[1,7],[1,7,8],[1,8],[2],[2,3],[2,3,4],[2,3,4,5],[2,3,4,5,6],[2,3,4,5,6,7],[2,3,4,5,6,7,8],[2,3,4,5,6,8],[2,3,4,5,7],[2,3,4,5,7,8],[2,3,4,5,8],[2,3,4,6],[2,3,4,6,7],[2,3,4,6,7,8],[2,3,4,6,8],[2,3,4,7],[2,3,4,7,8],[2,3,4,8],[2,3,5],[2,3,5,6],[2,3,5,6,7],[2,3,5,6,7,8],[2,3,5,6,8],[2,3,5,7],[2,3,5,7,8],[2,3,5,8],[2,3,6],[2,3,6,7],[2,3,6,7,8],[2,3,6,8],[2,3,7],[2,3,7,8],[2,3,8],[2,4],[2,4,5],[2,4,5,6],[2,4,5,6,7],[2,4,5,6,7,8],[2,4,5,6,8],[2,4,5,7],[2,4,5,7,8],[2,4,5,8],[2,4,6],[2,4,6,7],[2,4,6,7,8],[2,4,6,8],[2,4,7],[2,4,7,8],[2,4,8],[2,5],[2,5,6],[2,5,6,7],[2,5,6,7,8],[2,5,6,8],[2,5,7],[2,5,7,8],[2,5,8],[2,6],[2,6,7],[2,6,7,8],[2,6,8],[2,7],[2,7,8],[2,8],[3],[3,4],[3,4,5],[3,4,5,6],[3,4,5,6,7],[3,4,5,6,7,8],[3,4,5,6,8],[3,4,5,7],[3,4,5,7,8],[3,4,5,8],[3,4,6],[3,4,6,7],[3,4,6,7,8],[3,4,6,8],[3,4,7],[3,4,7,8],[3,4,8],[3,5],[3,5,6],[3,5,6,7],[3,5,6,7,8],[3,5,6,8],[3,5,7],[3,5,7,8],[3,5,8],[3,6],[3,6,7],[3,6,7,8],[3,6,8],[3,7],[3,7,8],[3,8],[4],[4,5],[4,5,6],[4,5,6,7],[4,5,6,7,8],[4,5,6,8],[4,5,7],[4,5,7,8],[4,5,8],[4,6],[4,6,7],[4,6,7,8],[4,6,8],[4,7],[4,7,8],[4,8],[5],[5,6],[5,6,7],[5,6,7,8],[5,6,8],[5,7],[5,7,8],[5,8],[6],[6,7],[6,7,8],[6,8],[7],[7,8],[8]]
]

test_cases_with_dup.each_with_index do |test_case, i|
    s = Solution.new(test_case)
    p s.subsets_with_dup
    p expected_with_dup[i]
end